class Node:
    def __init__(self, title: str, date: str, summary: str, facts: str) -> None:
        self.title = title
        self.date = date
        self.summary = summary
        self.facts = facts
        self.next = None
        self.rating = None
        self.rating_summary = None
        self.media: list[list] = []

    def deleteSummary(self):
        self.summary = ""
        
    def addSummary(self, new_summary: str):
        self.summary += " " + new_summary
        
    def addFacts(self, new_facts: str):
        self.facts += " " + new_facts
        
    def deletefacts(self):
        self.facts = ""

    def deleteTitle(self):
        self.title = ""
        
    def addMedia(self, type: str, filename: str) -> None:
        '''Add a media file to the node.'''
        self.media.append([type, filename])

    def removeMedia(self, filename: str) -> None:
        '''Remove a media file from the node.'''
        for file in self.media:
            if filename == file[1]:
                self.media.remove(file)
            else:
                print("Media file not found.")
    
    def displayMedia(self):
        print("Media files:")
        for path in self.media:
            print(path)

    def displayInfo(self):
        print("-"*50)
        print("Title: ", self.title)
        print("Date: ", self.date)
        print("Summary: ", self.summary)
        print("Facts: ", self.facts)
        print("rating: ", self.rating if self.rating else "--")
        print("rating summary:", self.rating_summary if self.rating_summary else "--")
        print("Media: ", self.media if self.media else "--")
        
    def rate_node(self, rating: float, data: str):
        self.rating = rating
        self.rating_summary = data

class LinkedList:
    def __init__(self) -> None:
        self.head = None

    def getNode(self, pos: int) ->Node:
        if not self.head:
            print("LinkedList is empty")
            return
        t = self.head
        if not pos:
            return t 
        
        for x in range(pos):
            if t.next is None:
                return
            t = t.next
        return t
        
    def addNode(self, node: Node, pos: int = -1) -> None:
        '''Add node in given pos(position). If admin don't pass position so by default new node will add to last of linked list'''
        if not self.head:
            self.head = node
            return
        if pos == -1:
            self.insertAtLast(node)
            return
        t = self.head
        if pos == 0:
            node.next = self.head
            self.head = node
            return
        for x in range(pos-1):
            if not t.next:
                print("Given position is out of range")
                return
            t = t.next
        node.next = t.next
        t.next = node

    def insertAtLast(self, node: Node) -> None:  # helper function
        t = self.head
        while t.next:
            t = t.next
        t.next = node

    def deleteLast(self) -> None:  # helper function
        t = self.head
        while t.next.next:
            t = t.next
        t.next = None

    def display(self) -> None:
        if not self.head:
            print("LinkedList is empty")
            return
        t = self.head
        while t:
            t.displayInfo()
            t = t.next

    def delete(self, pos: int = -1) -> None:
        '''Delete node from given pos(position). If admin don't pass position so by default last node will deleted.'''
        if not self.head:
            print("LinkedList is empty")
            return
        if pos == -1:
            self.deleteLast()
            return
        if pos == 0:
            self.head = self.head.next if self.head.next else None
            return
        t = self.head
        for x in range(pos):
            if not t.next:
                print("Given position is out of range")
                return
            t = t.next
        t = t.next if t.next else None

    def reorder(self, node, pos) -> None:
        '''Change position of given node'''
        if not self.head:
            print("LinkedList is empty")
            return
        t = self.head
        if t == node:
            self.head = t.next
            self.addNode(node, pos)
            return
        while t.next != node:
            if not t.next:
                print("Given Node is not found")
                return
            t = t.next
        t.next = t.next.next
        self.addNode(node, pos)


def display_menu():
    print("Timeline Menu:")
    print("1. Display timeline")
    print("2. Add node to timeline")
    print("3. Delete node from timeline")
    print("4. Add media to node")
    print("5. Remove media from node")
    print("6. Move node to new position")
    print("7. Rate the node")
    print("8. Exit")

def display_timeline(linked_list):
    linked_list.display()

def add_node(linked_list):
    title = input("Enter node title: ")
    date = input("Enter node date: ")
    summary = input("Enter node summary: ")
    facts = input("Enter node facts: ")
    node = Node(title, date, summary, facts)
    linked_list.addNode(node)

def delete_node(linked_list):
    pos = int(input("Enter position of node to delete (starting from 0): "))
    linked_list.delete(pos)

def add_media(node):
    if not node:
        print("Given position is out of range")
        return
    media_type = input("Enter media type (e.g. image, video, audio): ")
    file_path = input("Enter file path: ")
    node.addMedia(media_type, file_path)

def remove_media(node):
    media_type = input("Enter file path: ")
    node.removeMedia(media_type)

def move_node(linked_list):
    node_pos = int(input("Enter position of node to move (starting from 0): "))
    new_pos = int(input("Enter new position for node (starting from 0): "))
    node = linked_list.getNode(node_pos)
    linked_list.reorder(node, new_pos)

def main():
    linked_list = LinkedList()
    while True:
        display_menu()
        choice = input("Enter your choice: ")
        if choice == "1":
            linked_list.display()
        elif choice == "2":
            add_node(linked_list)
        elif choice == "3":
            delete_node(linked_list)
        elif choice == "4":
            pos = int(input("Enter position of node to add media to (starting from 0): "))
            node = linked_list.getNode(pos)
            add_media(node)
        elif choice == "5":
            pos = int(input("Enter position of node to remove media from (starting from 0): "))
            node = linked_list.getNode(pos)
            remove_media(node)
        elif choice == "6":
            move_node(linked_list)
        elif choice == "7":
            pos = int(input("Enter position of node to rate(starting from 0): "))
            rate = float(input("Enter your rating: "))
            summary = input("How interesting i find the node: ")
            if not node:
                print("Given position is out of range")
                return
            node = linked_list.getNode(pos)
            node.rate_node(rate, summary)
            
        elif choice == "8":
            print("Exiting...")
            break
        else:
            print("Invalid choice")

if __name__ == "__main__":
    main()

